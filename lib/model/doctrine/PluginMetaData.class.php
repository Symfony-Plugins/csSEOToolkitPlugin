<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginMetaData extends BaseMetaData
{
	public static $_split_tags = array('description' => array('</p>', '<br>', '<br />', '</blockquote>', '</div>'),
																		 'title' => array('<h1>' => '</h1>'));
	public static $_maxlen  = 255;
	public static $_wordlen  = 4;
	public static $_numkeywords  = 7;
	
	public function getUrl()
	{
		return $this->getSeoPage()->getUrl();
	}
	public function setUrl($val)
	{
		return $this->getSeoPage()->setUrl($val);
	}
	public static function generateMetaData($content, $request)
	{
		$meta = new MetaData();
		$meta->setUrl($request->getUri());
		$meta->setTitle(self::parseTitle($content, $request));
		$meta->setDescription(self::parseDescription($content));
		$meta->setKeywords(self::parseKeywords($content));
		$meta->save();
		return $meta;
	}
	private static function parseTitle($content, $request)
	{
		$title = '';
		foreach (self::$_split_tags['title'] as $open => $close) 
		{
			if($i = strpos($content, $close))
			{
				$h = strpos($content, $open);
				$title = $h && $h < $i ? substr($content, $h, $i-$h) : substr($content, 0, $i);
				break;
			}
		}
		$title = trim(strip_tags($title));
		return substr($title ? sfConfig::get('app_csSEOToolkitPlugin_SitePrefix') . $title : self::getDefaultTitle($request), 0, 255);
	}
	private static function getDefaultTitle($request)
	{
		$office = sfContext::getInstance()->getUser()->getAttribute('office');
		if($office && !$office->isMainSite())
		{
			return 'Vaco  |  ' . $office->getLocation() . ' '. sfInflector::humanize($request->getParameter('module'));
		}
		return 'Vaco  |  ' . sfInflector::humanize($request->getParameter('module'));
	}
	private static function parseDescription($content)
	{
		$summary = '';
		foreach (self::$_split_tags['description'] as $tag) 
		{
			if($i = strpos($content, $tag))
			{
				$summary = substr($content, 0, $i);
				break;
			}
		}
		$summary = $summary ? $summary : ($content ? trim(substr($content, 0, self::$_maxlen)) : '');
		$summary = preg_replace('/\s+/', ' ', strip_tags($summary));	
		return $summary;
	}
	private static function parseKeywords($content)
	{
		$words = explode(' ', self::stripPunctuation(strip_tags($content)));
		array_walk($words, 'trim');
		$words = array_filter($words, 'MetaData::filterLength');
		$weight = array();
		foreach ($words as $word) 
		{
			$weight[$word] = isset($weight[$word]) ? $weight[$word] + 1 : 0;
		}
		asort($weight, SORT_NUMERIC);
		return trim(substr(implode(',', array_keys(array_slice(array_reverse($weight), 0, self::$_numkeywords))), 0, 255));
	}
	private static function stripPunctuation($text)
	{
		return preg_replace('/\W/', ' ', $text);
	}
	private static function filterLength($text)
	{
		return strlen($text) >= self::$_wordlen;
	}
}